{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fspNdXOLqsYt"
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "import json\n",
        "from datetime import datetime\n",
        "\n",
        "API_KEY = \"878fac9d70a94e8a8f27ac7ad4151ef9\"\n",
        "url = f\"https://newsapi.org/v2/top-headlines?country=us&category=business&language=en&apiKey={API_KEY}\"\n",
        "\n",
        "response = requests.get(url)\n",
        "articles = response.json().get(\"articles\", [])\n",
        "\n",
        "# Save raw data\n",
        "with open(\"articles_json.json\", \"w\", encoding=\"utf-8\") as f:\n",
        "    json.dump(articles, f, indent=2)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "9kO6_EtC1-s7",
        "outputId": "f65bcba1-44f4-42d4-a57a-7ba3b150b9e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-da21cbcb-7957-42f2-b4be-ef9b898bb62a\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-da21cbcb-7957-42f2-b4be-ef9b898bb62a\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving project-cloud-460819-4447d125cb3e.json to project-cloud-460819-4447d125cb3e.json\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import json\n",
        "import re\n",
        "import nltk\n",
        "import tensorflow as tf\n",
        "from transformers import TFAutoModelForSequenceClassification, AutoTokenizer\n",
        "from nltk.corpus import stopwords\n",
        "from datetime import datetime\n",
        "import numpy as np\n",
        "\n",
        "# -------------------------------\n",
        "# 1. Setup\n",
        "# -------------------------------\n",
        "nltk.download('stopwords')\n",
        "stop_words = set(stopwords.words('english'))\n",
        "\n",
        "API_KEY = \"878fac9d70a94e8a8f27ac7ad4151ef9\"\n",
        "url = f\"https://newsapi.org/v2/top-headlines?country=us&category=business&language=en&apiKey={API_KEY}\"\n",
        "\n",
        "# Load tokenizer + model\n",
        "model_name = \"nlptown/bert-base-multilingual-uncased-sentiment\"\n",
        "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
        "model = TFAutoModelForSequenceClassification.from_pretrained(model_name)\n",
        "\n",
        "# -------------------------------\n",
        "# 2. Preprocessing\n",
        "# -------------------------------\n",
        "def clean_text(text):\n",
        "    text = re.sub(r'<.*?>', '', text)\n",
        "    text = re.sub(r'[^a-zA-Z ]', '', text)\n",
        "    tokens = text.lower().split()\n",
        "    tokens = [word for word in tokens if word not in stop_words]\n",
        "    return \" \".join(tokens)\n",
        "\n",
        "def classify_sentiment(text):\n",
        "    inputs = tokenizer(text[:512], return_tensors=\"tf\", truncation=True, padding=True)\n",
        "    outputs = model(inputs)[0]\n",
        "    scores = tf.nn.softmax(outputs, axis=1).numpy()[0]\n",
        "    label = np.argmax(scores) + 1  # 1 to 5 stars\n",
        "    if label <= 2:\n",
        "        return \"NEGATIVE\"\n",
        "    elif label == 3:\n",
        "        return \"NEUTRAL\"\n",
        "    else:\n",
        "        return \"POSITIVE\"\n",
        "\n",
        "# -------------------------------\n",
        "# 3. Fetch and Classify\n",
        "# -------------------------------\n",
        "response = requests.get(url)\n",
        "articles = response.json().get(\"articles\", [])\n",
        "\n",
        "classified_articles = []\n",
        "for a in articles:\n",
        "    title = a.get(\"title\", \"\")\n",
        "    desc = a.get(\"description\", \"\")\n",
        "    published = a.get(\"publishedAt\", \"\")\n",
        "    full_text = clean_text(f\"{title} {desc}\")\n",
        "    sentiment = classify_sentiment(full_text)\n",
        "\n",
        "    classified_articles.append({\n",
        "        \"title\": title,\n",
        "        \"description\": desc,\n",
        "        \"publishedAt\": published,\n",
        "        \"sentiment\": sentiment\n",
        "    })\n",
        "\n",
        "# -------------------------------\n",
        "# 4. Save to JSON\n",
        "# -------------------------------\n",
        "with open(\"articles_json.json\", \"w\", encoding=\"utf-8\") as f:\n",
        "    json.dump(classified_articles, f, indent=2)\n",
        "\n",
        "print(\"✅ File saved with sentiment info.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zBIPxltdrJ8_",
        "outputId": "138748ed-c175-4dc0-c65d-9c80a8ea31c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "All PyTorch model weights were used when initializing TFBertForSequenceClassification.\n",
            "\n",
            "All the weights of TFBertForSequenceClassification were initialized from the PyTorch model.\n",
            "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertForSequenceClassification for predictions without further training.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ File saved with sentiment info.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q pandas google-cloud-bigquery google-auth\n"
      ],
      "metadata": {
        "id": "CPLek8UStvcO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "import pandas as pd\n",
        "from google.cloud import bigquery\n",
        "from google.oauth2 import service_account\n",
        "import uuid\n",
        "import datetime\n",
        "\n",
        "# Path to your service account key\n",
        "key_path = \"project-cloud-460819-4447d125cb3e.json\"  # ✅ use your actual file name\n",
        "\n",
        "# Load credentials\n",
        "credentials = service_account.Credentials.from_service_account_file(key_path)\n",
        "\n",
        "# Create BigQuery client\n",
        "client = bigquery.Client(credentials=credentials, project=credentials.project_id)\n"
      ],
      "metadata": {
        "id": "OIPU4Zo6zCy_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with open(\"articles_json.json\", \"r\", encoding=\"utf-8\") as f:\n",
        "    data = json.load(f)\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n"
      ],
      "metadata": {
        "id": "B-udaj2yzGj-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        },
        "id": "egesCsa03lgB",
        "outputId": "f694ead7-6c95-4c37-f959-eaef10b3d14f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                title  \\\n",
              "0   CNBC Daily Open: Investors don't feel as threa...   \n",
              "1   Bitcoin traders, here’s why you should brace f...   \n",
              "2   Rate 'rigging' traders say they were scapegoat...   \n",
              "3   Entergy Louisiana and Entergy New Orleans forc...   \n",
              "4   Federal Reserve Chair Jerome Powell says he di...   \n",
              "5   Walmart, Subaru, Mattel: These are the brands ...   \n",
              "6   What’s open and what’s closed this Memorial Da...   \n",
              "7   Crypto market’s weekly winners and losers – SP...   \n",
              "8   'Big Pink' Serves as Symbol of Portland's 'Doo...   \n",
              "9   Scott Galloway says Musk's work at DOGE fueled...   \n",
              "10  Houston-area cities crack list of top places i...   \n",
              "11  Patients navigate an ‘absolutely insane’ maze ...   \n",
              "12  Millions of Americans hit with bad credit afte...   \n",
              "13  9 Menu Items You Should Always Avoid Ordering ...   \n",
              "14  Long-Bond Revolt Pressures 60/40 Comeback in C...   \n",
              "15  18 Items That Are Now So Expensive People Have...   \n",
              "16  Go read this report on AI’s effects on Amazon’...   \n",
              "17  International flight diverted to Seattle after...   \n",
              "18  Chart of the Week: Wall Street Joins BTC Rally...   \n",
              "\n",
              "                                          description           publishedAt  \\\n",
              "0   The danger of tariffs is still present, but ot...  2025-05-26T01:26:00Z   \n",
              "1   A rally led by the derivatives market could be...  2025-05-26T00:30:32Z   \n",
              "2   Tom Hayes and Carlo Palombo were among 37 City...  2025-05-25T23:04:07Z   \n",
              "3                    Action taken as directed by MISO  2025-05-25T22:43:21Z   \n",
              "4   Jerome Powell told Princeton's graduates on Su...  2025-05-25T22:07:00Z   \n",
              "5   Several household brand names have recently an...  2025-05-25T20:17:21Z   \n",
              "6   Businesses increasingly have chosen to stay op...  2025-05-25T19:54:44Z   \n",
              "7   After a volatile week of sharp moves, here’s w...  2025-05-25T19:05:32Z   \n",
              "8   US Bancorp Tower is just one of many buildings...  2025-05-25T18:41:00Z   \n",
              "9   During a recent Tesla earnings call, Musk said...  2025-05-25T18:06:00Z   \n",
              "10  Three cities in Texas made the top 10, with tw...  2025-05-25T17:46:00Z   \n",
              "11  Health insurance plans are changing how they c...  2025-05-25T17:21:48Z   \n",
              "12  More than 2 million Americans’ credit scores w...  2025-05-25T17:00:44Z   \n",
              "13  Beloved Midwestern staple Culver's is famous f...  2025-05-25T16:15:00Z   \n",
              "14  A slump in the US long bond is clouding the co...  2025-05-25T16:01:00Z   \n",
              "15  I am sure most of us are going to feel the sam...  2025-05-25T15:31:02Z   \n",
              "16                                                     2025-05-25T15:28:02Z   \n",
              "17  A flight was diverted to Seattle after a passe...  2025-05-25T15:15:50Z   \n",
              "18  Bitcoin hit new highs, but retail investors re...  2025-05-25T14:01:56Z   \n",
              "\n",
              "   sentiment  \n",
              "0   NEGATIVE  \n",
              "1   POSITIVE  \n",
              "2   NEGATIVE  \n",
              "3   NEGATIVE  \n",
              "4   NEGATIVE  \n",
              "5   NEGATIVE  \n",
              "6   NEGATIVE  \n",
              "7   POSITIVE  \n",
              "8   POSITIVE  \n",
              "9   NEGATIVE  \n",
              "10  NEGATIVE  \n",
              "11  NEGATIVE  \n",
              "12  NEGATIVE  \n",
              "13  NEGATIVE  \n",
              "14  NEGATIVE  \n",
              "15  NEGATIVE  \n",
              "16  NEGATIVE  \n",
              "17  NEGATIVE  \n",
              "18  NEGATIVE  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f869781f-a43f-4219-ae64-ad36d24291cd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>description</th>\n",
              "      <th>publishedAt</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>CNBC Daily Open: Investors don't feel as threa...</td>\n",
              "      <td>The danger of tariffs is still present, but ot...</td>\n",
              "      <td>2025-05-26T01:26:00Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Bitcoin traders, here’s why you should brace f...</td>\n",
              "      <td>A rally led by the derivatives market could be...</td>\n",
              "      <td>2025-05-26T00:30:32Z</td>\n",
              "      <td>POSITIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Rate 'rigging' traders say they were scapegoat...</td>\n",
              "      <td>Tom Hayes and Carlo Palombo were among 37 City...</td>\n",
              "      <td>2025-05-25T23:04:07Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Entergy Louisiana and Entergy New Orleans forc...</td>\n",
              "      <td>Action taken as directed by MISO</td>\n",
              "      <td>2025-05-25T22:43:21Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Federal Reserve Chair Jerome Powell says he di...</td>\n",
              "      <td>Jerome Powell told Princeton's graduates on Su...</td>\n",
              "      <td>2025-05-25T22:07:00Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Walmart, Subaru, Mattel: These are the brands ...</td>\n",
              "      <td>Several household brand names have recently an...</td>\n",
              "      <td>2025-05-25T20:17:21Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>What’s open and what’s closed this Memorial Da...</td>\n",
              "      <td>Businesses increasingly have chosen to stay op...</td>\n",
              "      <td>2025-05-25T19:54:44Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Crypto market’s weekly winners and losers – SP...</td>\n",
              "      <td>After a volatile week of sharp moves, here’s w...</td>\n",
              "      <td>2025-05-25T19:05:32Z</td>\n",
              "      <td>POSITIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>'Big Pink' Serves as Symbol of Portland's 'Doo...</td>\n",
              "      <td>US Bancorp Tower is just one of many buildings...</td>\n",
              "      <td>2025-05-25T18:41:00Z</td>\n",
              "      <td>POSITIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Scott Galloway says Musk's work at DOGE fueled...</td>\n",
              "      <td>During a recent Tesla earnings call, Musk said...</td>\n",
              "      <td>2025-05-25T18:06:00Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Houston-area cities crack list of top places i...</td>\n",
              "      <td>Three cities in Texas made the top 10, with tw...</td>\n",
              "      <td>2025-05-25T17:46:00Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Patients navigate an ‘absolutely insane’ maze ...</td>\n",
              "      <td>Health insurance plans are changing how they c...</td>\n",
              "      <td>2025-05-25T17:21:48Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Millions of Americans hit with bad credit afte...</td>\n",
              "      <td>More than 2 million Americans’ credit scores w...</td>\n",
              "      <td>2025-05-25T17:00:44Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>9 Menu Items You Should Always Avoid Ordering ...</td>\n",
              "      <td>Beloved Midwestern staple Culver's is famous f...</td>\n",
              "      <td>2025-05-25T16:15:00Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Long-Bond Revolt Pressures 60/40 Comeback in C...</td>\n",
              "      <td>A slump in the US long bond is clouding the co...</td>\n",
              "      <td>2025-05-25T16:01:00Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>18 Items That Are Now So Expensive People Have...</td>\n",
              "      <td>I am sure most of us are going to feel the sam...</td>\n",
              "      <td>2025-05-25T15:31:02Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Go read this report on AI’s effects on Amazon’...</td>\n",
              "      <td></td>\n",
              "      <td>2025-05-25T15:28:02Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>International flight diverted to Seattle after...</td>\n",
              "      <td>A flight was diverted to Seattle after a passe...</td>\n",
              "      <td>2025-05-25T15:15:50Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Chart of the Week: Wall Street Joins BTC Rally...</td>\n",
              "      <td>Bitcoin hit new highs, but retail investors re...</td>\n",
              "      <td>2025-05-25T14:01:56Z</td>\n",
              "      <td>NEGATIVE</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f869781f-a43f-4219-ae64-ad36d24291cd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f869781f-a43f-4219-ae64-ad36d24291cd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f869781f-a43f-4219-ae64-ad36d24291cd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-45aef508-27f9-4862-8b6d-92f3010b556e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-45aef508-27f9-4862-8b6d-92f3010b556e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-45aef508-27f9-4862-8b6d-92f3010b556e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_71414c42-d966-4bed-86ac-561cb61def2d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_71414c42-d966-4bed-86ac-561cb61def2d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 19,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"CNBC Daily Open: Investors don't feel as threatened by Trump's tariffs - CNBC\",\n          \"Walmart, Subaru, Mattel: These are the brands raising prices due to Trump's tariffs - Axios\",\n          \"Patients navigate an \\u2018absolutely insane\\u2019 maze to afford weight-loss drugs - The Washington Post\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"The danger of tariffs is still present, but other risks could cast a longer shadow over markets.\",\n          \"Several household brand names have recently announced they're looking at higher prices.\",\n          \"Health insurance plans are changing how they cover GLP-1 drugs for weight loss to rein in costs, forcing doctors and patients to adapt on the fly.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"publishedAt\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"2025-05-26T01:26:00Z\",\n          \"2025-05-25T20:17:21Z\",\n          \"2025-05-25T17:21:48Z\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"POSITIVE\",\n          \"NEGATIVE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "df[\"publishedAt\"] = pd.to_datetime(df[\"publishedAt\"], errors='coerce').dt.date\n",
        "\n",
        "table_id = f\"{credentials.project_id}.news_dataset.sentiment_results\"\n",
        "\n",
        "job_config = bigquery.LoadJobConfig(\n",
        "    schema=[\n",
        "        bigquery.SchemaField(\"title\", \"STRING\"),\n",
        "        bigquery.SchemaField(\"description\", \"STRING\"),\n",
        "        bigquery.SchemaField(\"publishedAt\", \"DATE\"),\n",
        "        bigquery.SchemaField(\"sentiment\", \"STRING\"),\n",
        "    ],\n",
        "    write_disposition=\"WRITE_APPEND\"\n",
        ")\n",
        "\n",
        "upload_df = df[[\"title\", \"description\", \"publishedAt\", \"sentiment\"]]\n",
        "\n",
        "job = client.load_table_from_dataframe(upload_df, table_id, job_config=job_config)\n",
        "job.result()\n",
        "\n",
        "print(\"✅ Data uploaded to BigQuery!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zhMN10VF62UC",
        "outputId": "b9d5b888-d5c7-4a2e-b50d-f7738290def3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Data uploaded to BigQuery!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!apt-get update\n",
        "!apt-get install -y kubectl\n",
        "!curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\"\n",
        "!chmod +x ./kubectl\n",
        "!mv ./kubectl /usr/local/bin/kubectl\n"
      ],
      "metadata": {
        "id": "9Wh21MgH8UUj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "454de195-c7b1-497c-d38b-1832d836326c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\r0% [Working]\r            \rGet:1 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease [3,632 B]\n",
            "\r0% [Waiting for headers] [Waiting for headers] [1 InRelease 3,632 B/3,632 B 100\r0% [Waiting for headers] [Waiting for headers] [Connected to r2u.stat.illinois.\r                                                                               \rGet:2 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease [1,581 B]\n",
            "\r0% [Waiting for headers] [Waiting for headers] [Connected to r2u.stat.illinois.\r                                                                               \rGet:3 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]\n",
            "Hit:4 http://archive.ubuntu.com/ubuntu jammy InRelease\n",
            "Get:5 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [128 kB]\n",
            "Get:6 https://r2u.stat.illinois.edu/ubuntu jammy InRelease [6,555 B]\n",
            "Get:7 http://archive.ubuntu.com/ubuntu jammy-backports InRelease [127 kB]\n",
            "Get:8 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease [18.1 kB]\n",
            "Get:9 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  Packages [1,683 kB]\n",
            "Get:10 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease [24.3 kB]\n",
            "Get:11 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease [24.6 kB]\n",
            "Get:12 https://r2u.stat.illinois.edu/ubuntu jammy/main all Packages [8,975 kB]\n",
            "Get:13 http://security.ubuntu.com/ubuntu jammy-security/main amd64 Packages [2,944 kB]\n",
            "Get:14 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages [1,552 kB]\n",
            "Get:15 https://r2u.stat.illinois.edu/ubuntu jammy/main amd64 Packages [2,732 kB]\n",
            "Get:16 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [4,387 kB]\n",
            "Get:17 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [4,549 kB]\n",
            "Get:18 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 Packages [1,245 kB]\n",
            "Get:19 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [3,258 kB]\n",
            "Get:20 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy/main amd64 Packages [34.3 kB]\n",
            "Get:21 http://archive.ubuntu.com/ubuntu jammy-backports/universe amd64 Packages [35.2 kB]\n",
            "Get:22 http://archive.ubuntu.com/ubuntu jammy-backports/main amd64 Packages [83.2 kB]\n",
            "Get:23 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy/main amd64 Packages [46.6 kB]\n",
            "Get:24 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy/main amd64 Packages [75.1 kB]\n",
            "Fetched 32.1 MB in 8s (3,865 kB/s)\n",
            "Reading package lists... Done\n",
            "W: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\n",
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "E: Unable to locate package kubectl\n",
            "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n",
            "                                 Dload  Upload   Total   Spent    Left  Speed\n",
            "100 53.7M  100 53.7M    0     0  95.6M      0 --:--:-- --:--:-- --:--:-- 95.5M\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!gcloud config set project your-project-id\n",
        "!gcloud config set compute/zone us-central1-a  # choose your zone\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KPHToJIMYTw1",
        "outputId": "2970d3c6-a9d3-47a4-a718-575ff54377a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1;33mWARNING:\u001b[0m [mabwfwl8@gmail.com] does not have permission to access projects instance [your-project-id] (or it may not exist): The caller does not have permission. This command is authenticated as mabwfwl8@gmail.com which is the active account specified by the [core/account] property\n",
            "Are you sure you wish to set property [core/project] to your-project-id?\n",
            "\n",
            "Do you want to continue (Y/n)?  Y\n",
            "\n",
            "Updated property [core/project].\n",
            "API [compute.googleapis.com] not enabled on project [your-project-id]. Would you\n",
            " like to enable and retry (this will take a few minutes)? (y/N)?  y\n",
            "\n",
            "Enabling service [compute.googleapis.com] on project [your-project-id]...\n",
            "\u001b[1;31mERROR:\u001b[0m (gcloud.config.set) PERMISSION_DENIED: Permission denied to enable service [compute.googleapis.com]\n",
            "Help Token: AeNz4PiH2ajyixJuinyQb99XXgMbigMpYXjvOPiS8AM3grFFuVQSWXY0jsp48Eb6a3y31xZBxXz6fpfmV_-yynGM4Juwzv3yOkONC6FhW3byPXdl. This command is authenticated as mabwfwl8@gmail.com which is the active account specified by the [core/account] property\n",
            "- '@type': type.googleapis.com/google.rpc.PreconditionFailure\n",
            "  violations:\n",
            "  - subject: '110002'\n",
            "    type: googleapis.com\n",
            "- '@type': type.googleapis.com/google.rpc.ErrorInfo\n",
            "  domain: serviceusage.googleapis.com\n",
            "  reason: AUTH_PERMISSION_DENIED\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_4OIYUQr-sWw"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}